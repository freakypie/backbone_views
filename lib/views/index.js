// Generated by CoffeeScript 1.7.1
(function() {
  var Backbone, ContextMixin, MixinView, NunjucksMixin, NunjucksView, SelectorMixin, _,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Backbone = require("backbone");

  _ = require("underscore");

  MixinView = (function(_super) {
    __extends(MixinView, _super);

    function MixinView() {
      return MixinView.__super__.constructor.apply(this, arguments);
    }

    MixinView.prototype.base_mixins = [];

    MixinView.prototype.mixins = [];

    MixinView.prototype.initialize = function(options) {
      var mixin, _i, _len, _ref, _ref1;
      if (options == null) {
        options = {};
      }
      this.options = options;
      if (this.options.mixins) {
        this.mixins = options.mixins;
      }
      _ref = this.listMixins();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        mixin = _ref[_i];
        if (mixin) {
          _.defaults(this, mixin);
          if ((_ref1 = mixin.initialize) != null) {
            _ref1.apply(this, [options]);
          }
          if (mixin.events) {
            this.events = _.defaults(this.events || {}, mixin.events);
          }
        } else {
          console.error("Mixin is not valid", mixin);
        }
      }
      return this.trigger("mixins:loaded", this);
    };

    MixinView.prototype.listMixins = function() {
      var m, _i, _len, _ref;
      if (!this._mixins) {
        this._mixins = [];
        _ref = this.base_mixins.concat(this.mixins);
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          m = _ref[_i];
          if (m) {
            this._mixins.push(m.prototype);
          } else {
            console.error("Mixin is invalid");
          }
        }
      }
      return this._mixins;
    };

    MixinView.prototype.render = function() {
      MixinView.__super__.render.call(this);
      return this.trigger("render:post");
    };

    return MixinView;

  })(Backbone.View);


  /*
    provides a "getContext" function that sends a "view:context" signal
    and calls the "getContext" function of all other mixins
   */

  ContextMixin = (function() {
    function ContextMixin() {}

    ContextMixin.prototype._skipContext = true;

    ContextMixin.prototype.getContext = function(context) {
      var mixin, _i, _len, _ref, _ref1;
      if (context == null) {
        context = {};
      }
      if (this.model) {
        context.model = this.model.attributes;
      }
      if (this.collection) {
        context.collection = this.collection;
      }
      _ref = this.listMixins();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        mixin = _ref[_i];
        if (!mixin._skipContext) {
          if ((_ref1 = mixin.getContext) != null) {
            _ref1.bind(this)(context);
          }
        }
      }
      this.trigger("view:context", context);
      return context;
    };

    return ContextMixin;

  })();


  /*
  selects items on the property `ui`
   */

  SelectorMixin = (function() {
    function SelectorMixin() {}

    SelectorMixin.prototype.initialize = function(options) {
      if (options.ui) {
        this.ui = options.ui;
      }
      if (this.ui) {
        if (!this._ui) {
          return this._ui = _.clone(this.ui);
        }
      }
    };

    SelectorMixin.prototype.setupUI = function() {
      var name, selector, _ref, _results;
      if (this._ui) {
        _ref = this._ui;
        _results = [];
        for (name in _ref) {
          selector = _ref[name];
          _results.push(this.ui[name] = this.$el.find(selector));
        }
        return _results;
      }
    };

    return SelectorMixin;

  })();


  /*
  Renders a nunjucks tempalte
  You can set the template on the class or pass it to the constructor
   */

  NunjucksMixin = (function() {
    function NunjucksMixin() {}

    NunjucksMixin.prototype.initialize = function(options) {
      if (options.template) {
        return this.template = options.template;
      }
    };

    NunjucksMixin.prototype.getTemplate = function() {
      return this.template;
    };

    NunjucksMixin.prototype.renderNunjucksTemplate = function(context) {
      var html, template;
      if (context == null) {
        context = {};
      }
      template = this.getTemplate();
      if (!template.compiled) {
        template.compile();
      }
      if (this.getContext) {
        context = this.getContext(context);
      }
      html = template.render(context);
      this.setElement(html);
      return this;
    };

    return NunjucksMixin;

  })();


  /*
  Renders a nunjucks tempalte
  You can set the template on the class or pass it to the constructor
   */

  NunjucksView = (function(_super) {
    __extends(NunjucksView, _super);

    function NunjucksView() {
      return NunjucksView.__super__.constructor.apply(this, arguments);
    }

    NunjucksView.prototype.base_mixins = [NunjucksMixin, ContextMixin, SelectorMixin];

    NunjucksView.prototype.render = function(context) {
      if (context == null) {
        context = {};
      }
      this.getContext(context);
      this.renderNunjucksTemplate(context);
      this.setupUI();
      NunjucksView.__super__.render.call(this, context);
      return this;
    };

    return NunjucksView;

  })(MixinView);

  module.exports = {
    mixins: {
      ContextMixin: ContextMixin,
      NunjucksMixin: NunjucksMixin,
      SelectorMixin: SelectorMixin
    },
    views: {
      MixinView: MixinView,
      NunjucksView: NunjucksView
    }
  };

}).call(this);
