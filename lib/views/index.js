// Generated by CoffeeScript 1.7.1
(function() {
  var Backbone, MixinView, NunjucksMixin, NunjucksView, SelectorMixin, _,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Backbone = require("backbone");

  _ = require("underscore");

  MixinView = (function(_super) {
    __extends(MixinView, _super);

    function MixinView() {
      return MixinView.__super__.constructor.apply(this, arguments);
    }

    MixinView.prototype.mixins = [];

    MixinView.prototype.initialize = function(options) {
      var mixin, _i, _len, _ref, _ref1, _results;
      if (options == null) {
        options = {};
      }
      this.options = options;
      if (this.options.mixins) {
        this.mixins = options.mixins;
      }
      _ref = this.mixins;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        mixin = _ref[_i];
        _.extend(this, mixin.prototype);
        _results.push((_ref1 = mixin.prototype.mixin) != null ? _ref1.apply(this, [options]) : void 0);
      }
      return _results;
    };

    return MixinView;

  })(Backbone.View);


  /*
  selects items on the property `ui`
   */

  SelectorMixin = (function() {
    function SelectorMixin() {}

    SelectorMixin.prototype.mixin = function(options) {
      if (options.ui) {
        this.ui = options.ui;
      }
      if (this.ui) {
        if (!this._ui) {
          return this._ui = _.clone(this.ui);
        }
      }
    };

    SelectorMixin.prototype.setupUI = function() {
      var name, selector, _ref, _results;
      if (this._ui) {
        _ref = this._ui;
        _results = [];
        for (name in _ref) {
          selector = _ref[name];
          _results.push(this.ui[name] = this.$el.find(selector));
        }
        return _results;
      }
    };

    return SelectorMixin;

  })();


  /*
  Renders a nunjucks tempalte
  You can set the template on the class or pass it to the constructor
   */

  NunjucksMixin = (function() {
    function NunjucksMixin() {}

    NunjucksMixin.prototype.mixin = function(options) {
      if (options.template) {
        return this.template = options.template;
      }
    };

    NunjucksMixin.prototype.renderNunjucksTemplate = function(context) {
      var html, template;
      if (context == null) {
        context = {};
      }
      if (this.getTemplate) {
        template = this.getTemplate();
      } else {
        template = this.template;
      }
      if (!template.compiled) {
        template.compile();
      }
      if (this.getContext) {
        context = this.getContext(context);
      }
      html = template.render(context);
      this.setElement(html);
      return this;
    };

    NunjucksMixin.prototype.bootstrapField = function(name, object) {
      var error, inputSize, label, labelSize, validationclass, widget;
      object.widget.classes = object.widget.classes || [];
      object.widget.classes.push('form-control');
      inputSize = this.inputSize || "col-md-4";
      labelSize = this.labelSize || "col-md-8";
      label = object.labelHTML(name);
      label = ("<div class='" + labelSize + "'>") + label + "</div>";
      if (object.error) {
        error = '<div class="alert alert-error help-block">' + object.error + '</div>';
      } else {
        error = '';
      }
      validationclass = object.value && !object.error && 'has-success' || '';
      validationclass = object.error && 'has-error' || validationclass;
      widget = object.widget.toHTML(name, object);
      widget = ("<div class='" + inputSize + "'>") + widget + "</div>";
      return '<div class="form-group ' + validationclass + '">' + label + widget + error + '</div>';
    };

    return NunjucksMixin;

  })();


  /*
  Renders a nunjucks tempalte
  You can set the template on the class or pass it to the constructor
   */

  NunjucksView = (function(_super) {
    __extends(NunjucksView, _super);

    function NunjucksView() {
      return NunjucksView.__super__.constructor.apply(this, arguments);
    }

    NunjucksView.prototype.mixins = [NunjucksMixin, SelectorMixin];

    NunjucksView.prototype.render = function(context) {
      if (context == null) {
        context = {};
      }
      this.renderNunjucksTemplate(context);
      this.setupUI();
      return this;
    };

    return NunjucksView;

  })(MixinView);

  module.exports = {
    mixins: {
      NunjucksMixin: NunjucksMixin,
      SelectorMixin: SelectorMixin
    },
    views: {
      MixinView: MixinView,
      NunjucksView: NunjucksView
    }
  };

}).call(this);
