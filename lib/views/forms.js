// Generated by CoffeeScript 1.7.1
(function() {
  var Backbone, FormMixin, FormView, forms, index,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  index = require("./index");

  forms = require("forms");

  Backbone = require("backbone");

  FormMixin = (function() {
    function FormMixin() {}

    FormMixin.prototype.form = null;

    FormMixin.prototype.initialize = function(options) {
      if (options == null) {
        options = {};
      }
      if (options.form) {
        this.form = options.form;
      }
      if (options.renderFunc) {
        return this.renderFunc = options.renderFunc;
      }
    };

    FormMixin.prototype.getForm = function(context) {
      return this.form;
    };

    FormMixin.prototype.renderForm = function(context) {
      var form, html;
      if (context == null) {
        context = {};
      }
      form = this.getForm(context);
      html = form.toHTML(renderFunc);
      return this.$el.html(html);
    };

    return FormMixin;

  })();

  FormView = (function(_super) {
    __extends(FormView, _super);

    function FormView() {
      return FormView.__super__.constructor.apply(this, arguments);
    }

    FormView.prototype.mixins = [index.mixins.SelectorMixin, FormMixin];

    FormView.prototype.render = function(context) {
      if (context == null) {
        context = {};
      }
      this.renderForm(context);
      this.setupUI();
      return this;
    };

    return FormView;

  })(index.views.MixinView);

  module.exports = {
    mixins: {
      FormMixin: FormMixin
    },
    views: {
      FormView: FormView
    }
  };

}).call(this);
