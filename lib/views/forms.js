// Generated by CoffeeScript 1.7.1
(function() {
  var Backbone, BootstrapFormMixin, FormMixin, forms, index, _,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  index = require("./index");

  forms = require("forms");

  Backbone = require("backbone");

  _ = require("underscore");

  FormMixin = (function() {
    function FormMixin() {}

    FormMixin.prototype.form = null;

    FormMixin.prototype.events = {
      "form submit": "handleFormSubmit"
    };

    FormMixin.prototype.initialize = function(options) {
      if (options == null) {
        options = {};
      }
      if (options.form) {
        this.form = options.form;
      }
      if (options.renderFunc) {
        return this.renderFunc = options.renderFunc;
      }
    };

    FormMixin.prototype.getContext = function(context) {
      if (context == null) {
        context = {};
      }
      return context.form = this.renderForm(context);
    };

    FormMixin.prototype.getForm = function(context) {
      return this.form;
    };

    FormMixin.prototype.renderForm = function(context) {
      var form, html;
      if (context == null) {
        context = {};
      }
      form = this.getForm(context);
      html = form.toHTML(this.renderFunc);
      return html;
    };

    FormMixin.prototype.handleFormSubmit = function(e) {
      var data, form, row, _i, _len, _ref;
      data = {};
      _ref = this.$(e.target).serializeArray();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        row = _ref[_i];
        data[row.name] = row.value;
      }
      form = this.getForm(context).bind(data);
      return form.validate((function(_this) {
        return function(err, form) {
          if (form.isValid()) {
            _this.trigger("form:valid", form);
            return typeof _this.formValid === "function" ? _this.formValid(form) : void 0;
          } else {
            _this.trigger("form:invalid", form);
            return typeof _this.formInvalid === "function" ? _this.formInvalid(form) : void 0;
          }
        };
      })(this));
    };

    return FormMixin;

  })();

  BootstrapFormMixin = (function(_super) {
    __extends(BootstrapFormMixin, _super);

    function BootstrapFormMixin() {
      return BootstrapFormMixin.__super__.constructor.apply(this, arguments);
    }

    BootstrapFormMixin.prototype.bootstrapField = function(name, object) {
      var error, inputSize, label, labelSize, validationclass, widget;
      object.widget.classes = object.widget.classes || [];
      object.widget.classes.push('form-control');
      inputSize = this.inputSize || "col-md-4";
      labelSize = this.labelSize || "col-md-8";
      label = object.labelHTML(name);
      label = ("<div class='" + labelSize + "'>") + label + "</div>";
      if (object.error) {
        error = '<div class="alert alert-error help-block">' + object.error + '</div>';
      } else {
        error = '';
      }
      validationclass = object.value && !object.error && 'has-success' || '';
      validationclass = object.error && 'has-error' || validationclass;
      widget = object.widget.toHTML(name, object);
      widget = ("<div class='" + inputSize + "'>") + widget + "</div>";
      return '<div class="form-group ' + validationclass + '">' + label + widget + error + '</div>';
    };

    return BootstrapFormMixin;

  })(FormMixin);

  module.exports = {
    mixins: {
      FormMixin: FormMixin,
      BootstrapFormMixin: BootstrapFormMixin
    }
  };

}).call(this);

//# sourceMappingURL=forms.map
