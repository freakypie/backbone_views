// Generated by CoffeeScript 1.9.0
(function() {
  var Backbone, ListMixin, _;

  Backbone = require("backbone");

  _ = require("underscore");

  ListMixin = (function() {
    function ListMixin() {}

    ListMixin.prototype.itemViewClass = null;

    ListMixin.prototype.listSelector = null;

    ListMixin.prototype.initialize = function(options) {
      this.views = {};
      this.listenTo(this.collection, "add", this.added);
      this.listenTo(this.collection, 'reset', this.addAll);
      this.listenTo(this.collection, "remove", this.removed);
      return this.listenTo(this, "render:post", this.addAll);
    };

    ListMixin.prototype.getItemView = function(model) {
      return new this.itemViewClass({
        model: model
      });
    };

    ListMixin.prototype.getListElement = function() {
      if (this.listSelector) {
        this.listEl = this.$el.find(this.listSelector);
      } else {
        this.listEl = this.$el;
      }
      return this.listEl;
    };

    ListMixin.prototype.added = function(model) {
      var view;
      view = this.getItemView(model);
      this.views[model.cid] = view;
      return this.getListElement().append(view.render().el);
    };

    ListMixin.prototype.removed = function(model) {
      var view;
      view = this.views[model.cid];
      if (view) {
        view.remove();
        return delete this.views[model.cid];
      }
    };

    ListMixin.prototype.addAll = function() {
      var model, _i, _len, _ref, _results;
      this.listEl = this.getListElement();
      this.$el.empty();
      this.views = {};
      _ref = this.collection.models;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        model = _ref[_i];
        _results.push(this.added(model));
      }
      return _results;
    };

    return ListMixin;

  })();

  module.exports = {
    mixins: {
      ListMixin: ListMixin
    }
  };

}).call(this);
